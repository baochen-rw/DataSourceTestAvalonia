// Copyright 2008-2021 by Rightware. All rights reserved.

#ifndef KZ_SCROLL_VIEW_2D_HPP
#define KZ_SCROLL_VIEW_2D_HPP

#include <kanzi/core.ui/node/node2d.hpp>
#include <kanzi/ui/node/concept/scroll_view.hpp>
#include <kanzi/core.ui/input/input_manipulator.hpp>

namespace kanzi
{

class ScrollView2D;
typedef shared_ptr<ScrollView2D> ScrollView2DSharedPtr;

/// Use the Scroll View 2D node to create an input plane to enable user input from gestures.
/// For example, you can use the scroll message with its parameters generated by a Scroll View
/// node to move a map plane or rotate a mesh.
///
/// When you create a Scroll View node it does not have a visual shape and does not necessarily
/// need visible content. You can use a Scroll View node as an interactive surface even when it
/// does not have visible content. When a user interacts with a Scroll View node, the action generates
/// a message that travels to the Scroll View node where you can define the behavior for that message.
///
/// Relative position within a Scroll View is called scroll position and a position to which a Scroll
/// View is going to scroll is called scroll target. Scroll View nodes report changes of their scroll
/// position using the ScrollViewConcept::ScrolledMessage message. For example, you can add actions
/// to react to these messages to set the position of a node controlled by a Scroll View node according
/// to the scrolling. Current scroll position can also be read from #ScrollPositionProperty.
///
/// Scroll View 2D node has location, position, and size in 2D space. It registers user input in
/// 2D coordinates within the area defined by the size of the Scroll View 2D node. Take this into account
/// when you design interaction with a Scroll View 2D. For example, if you rotate a Scroll View 2D node,
/// the scroll input gets distorted.
///
/// To use a Scroll View 2D node to pan a node, use the #ScrolledMessage messages:
/// \snippet snippets_scrollview2d.cpp Object panning
///
/// To use a Scroll View 2D node to scale a node, use the #ZoomedMessage messages:
/// \snippet snippets_scrollview2d.cpp Zoomed message
///
/// Finding out when scrolling starts or ends
/// ----
///
/// You can find out when the scrolling of a Scroll View node starts or ends by subscribing to the
/// Scroll View messages. Scroll View nodes send:
/// - #ScrollStartedMessage message when scrolling starts, regardless of how the scrolling started.
/// - #ScrollFinishedMessage message when scrolling ends, regardless of how the scrolling ended.
/// Scrolling ends when the interpolators reach the target values and the current position no longer changes.
/// - #UserScrollStartedMessage message when user interaction causes the scrolling to start.
/// - #UserScrollFinishedMessage message when user interaction causes the scrolling to end. At this point the
/// user interaction ended, but the scrolling movement can still continue.
///
/// Setting the scroll position of a Scroll View node
/// ----
///
/// You can scroll to a specific position in a Scroll View node by sending a #SetScrollMessage message to that
/// Scroll View. When you send a #SetScrollMessage message to a Scroll View, that Scroll View goes to that
/// position in an instant. If scrolling to a position is in progress and the scroll target is different from
/// the current scroll position, this message does not stop that scrolling.
///
/// When you want to change the values towards which the Scroll View interpolators are going, set the scroll target
/// for that Scroll View. If the scroll target and the current scroll position do not match, a Scroll View node
/// interpolates the scroll values towards the scroll target values. X and Y scroll values use separate interpolators
/// and velocities.
///
/// To set the scroll position:
/// \snippet snippets_scrollview2d.cpp Set scroll position
///
/// To set the scroll target and start scrolling to the position set by the target:
/// \snippet snippets_scrollview2d.cpp Set scroll target
///
/// \see For a 3D version of the Scroll View node, see ScrollView3D.
/// \see For a general description of the Scroll View node, see ScrollViewConcept.
class KANZI_UI_API ScrollView2D : public ScrollViewConceptImpl<Node2D, ScrollView2D>
{
    typedef ScrollViewConceptImpl<Node2D, ScrollView2D> ConceptClass;

public:

    /// Creates a Scroll View node.
    /// \param domain The domain the node belongs to.
    /// \param name The name of the node.
    static ScrollView2DSharedPtr create(Domain* domain, string_view name);

    KZ_METACLASS_BEGIN(ScrollView2D, ConceptClass, "Kanzi.ScrollView2D")
    KZ_METACLASS_END()

    static PropertyTypeEditorInfoSharedPtr makeEditorInfo();

    /// Kanzi internally uses this function to calculate the pan position based on input point,
    /// compares it to the previous input point, and provides these values to the interpolators.
    /// \param point The point that comes from the input manipulator.
    optional<Vector2> calculatePanPosition(const optional<Vector2>& point) const;

    /// Kanzi internally uses this function to extract input point from message arguments and
    /// calls calculatePanPosition(const optional<Vector2>& point).
    /// \param arguments Message arguments from the input manipulator.
    optional<Vector2> calculatePanPosition(const InputManipulator::InputMessageArguments& arguments) const;

protected:

    /// Constructor.
    /// \param domain The UI domain the node belongs to.
    /// \param name The name of the node.
    explicit ScrollView2D(Domain* domain, string_view name);
};

} // namespace

#endif
